#include<bits/stdc++.h>
#include"CNeuralNet.h"
#pragma comment(linker, "/STACK:102400000,102400000")
using namespace std;
const int T=1000,crowd=40,T1=100;
CNeuralNet network[crowd*crowd+T1],bestnet;
char C;
bool cmp(const CNeuralNet&a,const CNeuralNet&b){
    return a.loss<b.loss;
}
CNeuralNet operator*(CNeuralNet a,CNeuralNet b){
    for (int i=0;i<a.Layer.size();i++){ 
        int x=rand()%101;
        for (int j=0;j<a.Layer[i].w.size();j++){
            a.Layer[i].w[j]=(a.Layer[i].w[j]*x+b.Layer[i].w[j]*(100-x))/100;
        }
    }
    return a;
}
int main(){
    srand((int)time(0));
    cout<<"choose a model to train:";
    cin>>C;
    string model="model";
    model+=C;
    model+=".in";
    string list="list";
    list+=C;
    list+=".txt";
    string command="cp list.txt ";
    command+=list;
    system(command.c_str());    
    fstream f;
    bestnet.train(list,model,1,1,C);
    cout<<"The origin loss is:"<<bestnet.loss<<endl;
    network[0]=bestnet;
    for (int i=1;i<crowd;i++)
        network[i].train(list,model,0,1,C);
    int clo=0;
    while (1){
        ++clo;
        if (clo==10){
            clo=0;
            int x=rand()%5;
            cout<<"Bang!!!Left "<<x+1<<"people"<<endl;
            for (int i=x;i<crowd;i++)
                network[i].train(list,model,0,1,C);
        }
        int sum=crowd-1;
        for (int i=0;i<crowd;i++)
            for (int j=i+1;j<crowd;j++)
                network[++sum]=network[i]*network[j];
        for (int i=0;i<=sum;i++)
            network[i].train(list,model,0,0,C);
        sort(network,network+sum+1,cmp);
        if (bestnet.loss>network[0].loss){
            if (network[0].loss/bestnet.loss<0.80)clo=0;
            bestnet=network[0];
            cout<<"find a better model with loss of "<<bestnet.loss<<"!"<<endl;
            bestnet.work(list,model,0,1,C);
            bestnet.save(model);
            cout<<"Save successful!!"<<endl;
        }
        for (int i=0;i<=sum;i++){
            if (rand()%50==1)network[i].train(list,model,0,1,C);
            else
            if (rand()%50==1)
            for (int j=0;j<network[i].Layer[j].w.size();j++)
                if (rand()%100==1){
                    if (rand()&1)network[i].Layer[j].w[j]=(rand()%100000+1)*(-0.001);
                    else
                        network[i].Layer[j].w[j]=(rand()%100000+1)*(0.001);
                }
        }
        for (int i=0;i<=sum;i++)
            network[i].train(list,model,0,0,C);
        sort(network,network+sum+1,cmp);
        if (bestnet.loss>network[0].loss){
            if (network[0].loss/bestnet.loss<0.80)clo=0;
            bestnet=network[0];
            cout<<"find a better model with loss of "<<bestnet.loss<<"!"<<endl;
            bestnet.work(list,model,0,1,C);
            bestnet.save(model);
            cout<<"Save successful!!"<<endl;
        }
    }
    return 0;
}
